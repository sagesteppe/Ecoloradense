#  whitebox::wbt_compound(demIN, output =  file.path(p, 'cti.tif'))
whitebox::wbt_downslope_index(demIN, output = file.path(p, 'DSI.tif'))
whitebox::wbt_profile_curvature(demIN, output = file.path(p, 'profile_curv.tif'))
whitebox::wbt_plan_curvature(demIN, output = file.path(p, 'plan_curv.tif'))
whitebox::wbt_maximal_curvature(demIN, output = file.path(p, 'maximal_curv.tif'))
whitebox::wbt_tangential_curvature(demIN, output = file.path(p, 'tangential_curv.tif'))
whitebox::wbt_fill_depressions(demIN, output = file.path(p, 'DEM_filled.tif'))
whitebox::wbt_ruggedness_index(demIN, output = file.path(p, 'ruggedness.tif'))
whitebox::wbt_geomorphons(demIN, output = file.path(p, 'geomorphons.tif'))
whitebox::wbt_pennock_landform_class(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'Pennock.tif'))
whitebox::wbt_relative_topographic_position(demIN, output = file.path(p, 'RTP.tif'))
whitebox::wbt_d8_pointer(file.path(p, 'DEM_filled.tif'), esri_pntr = F,
output = file.path(p, 'D8pntr.tif'))
whitebox::wbt_basins(file.path(p, 'D8pntr.tif'), esri_pntr = F, output = file.path(p, 'basins.tif'))
}
morphoMaker(x = '../data/spatial/processed/dem_3arc/dem.tif',
p = '../data/spatial/processed/dem_3arc/geomorphology')
#' morphoMaker
#' calculate many geomorphological features of a landscape
#' @param x a path to a digital elevation model
#' @param p an output path where all geomorphologic products should be saved.
morphoMaker <- function(x, p){
demIN <- x
dir.create(p)
whitebox::wbt_fill_depressions(demIN, output = file.path(p, 'DEM_filled.tif'))
whitebox::wbt_aspect(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'aspect.tif'))
whitebox::wbt_slope(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'slope.tif'))
whitebox::wbt_ruggedness_index(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'ruggedness.tif'))
whitebox::wbt_geomorphons(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'geomorphons.tif'))
whitebox::wbt_pennock_landform_class(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'Pennock.tif'))
whitebox::wbt_relative_topographic_position(demIN, output = file.path(p, 'RTP.tif'))
# whitebox::wbt_multiscale_roughness(demIN, max_scale = , min_scale = ,
#                                     out_mag = file.path(p, 'roughnes-mag.tif'),
#                                     out_scale = file.path(p, 'roughnes-scale.tif'))
#  whitebox::wbt_compound(demIN, output =  file.path(p, 'cti.tif'))
whitebox::wbt_downslope_index(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'DSI.tif'))
whitebox::wbt_profile_curvature(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'profile_curv.tif'))
whitebox::wbt_plan_curvature(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'plan_curv.tif'))
whitebox::wbt_maximal_curvature(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'maximal_curv.tif'))
whitebox::wbt_tangential_curvature(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'tangential_curv.tif'))
whitebox::wbt_ruggedness_index(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'ruggedness.tif'))
whitebox::wbt_geomorphons(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'geomorphons.tif'))
whitebox::wbt_pennock_landform_class(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'Pennock.tif'))
whitebox::wbt_relative_topographic_position(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'RTP.tif'))
whitebox::wbt_d8_pointer(file.path(p, 'DEM_filled.tif'), esri_pntr = F,
output = file.path(p, 'D8pntr.tif'))
whitebox::wbt_basins(file.path(p, 'D8pntr.tif'), esri_pntr = F, output = file.path(p, 'basins.tif'))
}
morphoMaker(x = '../data/spatial/processed/dem_3arc/dem.tif',
p = '../data/spatial/processed/dem_3arc/geomorphology')
morphoMaker(x = '../data/spatial/processed/dem_1arc/dem.tif',
p = '../data/spatial/processed/dem_1arc/geomorphology')
#' morphoMaker
#' calculate many geomorphological features of a landscape
#' @param x a path to a digital elevation model
#' @param p an output path where all geomorphologic products should be saved.
morphoMaker <- function(x, p){
demIN <- x
dir.create(p)
whitebox::wbt_fill_depressions(demIN, output = file.path(p, 'DEM_filled.tif'))
whitebox::wbt_aspect(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'aspect.tif'))
whitebox::wbt_slope(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'slope.tif'))
whitebox::wbt_ruggedness_index(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'ruggedness.tif'))
whitebox::wbt_geomorphons(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'geomorphons.tif'))
whitebox::wbt_pennock_landform_class(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'Pennock.tif'))
whitebox::wbt_relative_topographic_position(demIN, output = file.path(p, 'RTP.tif'))
whitebox::wbt_downslope_index(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'DSI.tif'))
whitebox::wbt_profile_curvature(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'profile_curv.tif'))
whitebox::wbt_plan_curvature(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'plan_curv.tif'))
whitebox::wbt_maximal_curvature(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'maximal_curv.tif'))
whitebox::wbt_tangential_curvature(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'tangential_curv.tif'))
whitebox::wbt_ruggedness_index(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'ruggedness.tif'))
whitebox::wbt_geomorphons(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'geomorphons.tif'))
whitebox::wbt_pennock_landform_class(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'Pennock.tif'))
whitebox::wbt_relative_topographic_position(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'RTP.tif'))
whitebox::wbt_d8_pointer(file.path(p, 'DEM_filled.tif'), esri_pntr = F,
output = file.path(p, 'D8pntr.tif'))
whitebox::wbt_basins(file.path(p, 'D8pntr.tif'), esri_pntr = F, output = file.path(p, 'basins.tif'))
}
morphoMaker(x = '../data/spatial/processed/dem_1-3arc/dem.tif',
p = '../data/spatial/processed/dem_1-3arc/geomorphology')
library(tidyverse)
library(sf)
library(terra)
# first we will create a domain for all analysis. The 'closest' this bounding box is to a known
# occurrence is 10 miles. The furthest distances vary.
domain <- sf::st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
st_union() %>%
st_transform(32613) %>%
st_buffer(16093) %>%
st_transform(4326) %>%
vect()
#' assmeble and crop DEM's' to an area.
#' @param x path to directory contains tifs to combine for final product
#' @param domain vector data which to crop the extent to
DEMcrop <- function(x, domain){
paths <- file.path(x, list.files(x, 'tif$'))
if(length(paths) > 1){
DEMs <- terra::sprc(paths)
DEMs <- terra::mosaic(DEMs) } else {
DEMs <- terra::rast(file.path(x, list.files(x, 'tif$')))}
d <- terra::project(domain, crs(DEMs)) |>
terra::ext()
DEMs <- terra::crop(DEMs, d)
names(DEMs) <- 'elevation'
proj_dem_path <- file.path(
'../data/spatial/processed', basename(x), 'dem.tif')
terra::project(DEMs, "epsg:32613", filename = proj_dem_path, overwrite = TRUE)
}
DEMcrop('../data/spatial/raw/dem_3m', domain = domain)
#' morphoMaker
#' calculate many geomorphological features of a landscape
#' @param x a path to a digital elevation model
#' @param p an output path where all geomorphologic products should be saved.
morphoMaker <- function(x, p){
demIN <- x
dir.create(p)
whitebox::wbt_fill_depressions(demIN, output = file.path(p, 'DEM_filled.tif'))
whitebox::wbt_aspect(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'aspect.tif'))
whitebox::wbt_slope(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'slope.tif'))
whitebox::wbt_ruggedness_index(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'ruggedness.tif'))
whitebox::wbt_geomorphons(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'geomorphons.tif'))
whitebox::wbt_pennock_landform_class(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'Pennock.tif'))
whitebox::wbt_relative_topographic_position(demIN, output = file.path(p, 'RTP.tif'))
whitebox::wbt_downslope_index(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'DSI.tif'))
whitebox::wbt_profile_curvature(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'profile_curv.tif'))
whitebox::wbt_plan_curvature(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'plan_curv.tif'))
whitebox::wbt_maximal_curvature(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'maximal_curv.tif'))
whitebox::wbt_tangential_curvature(file.path(p, 'DEM_filled.tif'), output = file.path(p, 'tangential_curv.tif'))
whitebox::wbt_d8_pointer(file.path(p, 'DEM_filled.tif'), esri_pntr = F,
output = file.path(p, 'D8pntr.tif'))
whitebox::wbt_basins(file.path(p, 'D8pntr.tif'), esri_pntr = F, output = file.path(p, 'basins.tif'))
}
morphoMaker(x = '../data/spatial/processed/dem_3m/dem.tif',
p = '../data/spatial/processed/dem_3m/geomorphology')
occurrence_data <- st_read(
'../data/collections/occurrences_coloradense/occurrences.shp', quiet = T)
absence_data <- st_read(
'../data/spatial/processed/pseudo-absences/iteration1/absences.shp', quiet = T)
library(tidyverse)
library(sf)
library(terra)
occurrence_data <- st_read(
'../data/collections/occurrences_coloradense/occurrences.shp', quiet = T)
absence_data <- st_read(
'../data/spatial/processed/pseudo-absences/iteration1/absences.shp', quiet = T)
View(absence_data)
bind_rows(
st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(Occurrence = 1),
st_read('../data/spatial/processed/pseudo-absences/iteration1/absences.shp', quiet = T) %>%
mutate(Occurrence = 0)
)
bind_rows(
st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(Occurrence = 1) %>%
st_transform(32613),
st_read('../data/spatial/processed/pseudo-absences/iteration1/absences.shp', quiet = T) %>%
mutate(Occurrence = 0)
)
occ_data <- bind_rows(
st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(Occurrence = 1) %>%
st_transform(32613),
st_read('../data/spatial/processed/pseudo-absences/iteration1/absences.shp', quiet = T) %>%
mutate(Occurrence = 0)
)
occ_data <- bind_rows(
st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(Occurrence = 1) %>%
st_transform(32613),
st_read('../data/spatial/processed/pseudo-absences/iteration1/absences.shp', quiet = T) %>%
mutate(Occurrence = 0)
)
View(occ_data)
occ_data <- bind_rows(
st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(Occurrence = 1) %>%
st_transform(32613),
st_read('../data/spatial/processed/pseudo-absences/iteration1/absences.shp', quiet = T) %>%
mutate(Occurrence = 0) %>%
sample(x, size = 125)
)
occ_data <- bind_rows(
st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(Occurrence = 1) %>%
st_transform(32613),
st_read('../data/spatial/processed/pseudo-absences/iteration1/absences.shp', quiet = T) %>%
mutate(Occurrence = 0) %>%
sample(size = 125)
)
st_read('../data/spatial/processed/pseudo-absences/iteration1/absences.shp', quiet = T) %>%
mutate(Occurrence = 0)
occ_data <- bind_rows(
st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(Occurrence = 1) %>%
st_transform(32613),
st_read('../data/spatial/processed/pseudo-absences/iteration1/absences.shp', quiet = T) %>%
mutate(Occurrence = 0) %>%
sample_n(size = 125)
)
View(occ_data)
View(occ_data)
rastReader <- function(x){
p <- paste0('../data/spatial/processed/', x, '/geomorphology/')
f <- paste0(p, list.files(p))
f <- f[! grepl('D8pntr|basins', f) ] # remove the D8pntr & Basins
s <- terra::rast(f)
}
stack <- rastReader('dem_1arc')
View(stack)
rastReader <- function(x){
p <- paste0('../data/spatial/processed/', x, '/geomorphology/')
f <- paste0(p, list.files(p))
f <- f[! grepl('D8pntr|basins|DEM', f) ] # remove the D8pntr & Basins
s <- terra::rast(f)
}
stack <- rastReader('dem_1arc')
View(stack)
p2proc <- '../data/spatial/processed'
rastReader <- function(x, p2proc){
p <- file.path(p2proc, x, 'geomorphology')
f <- paste0(p, list.files(p))
f <- f[! grepl('D8pntr|basins|DEM', f) ] # remove the D8pntr & Basins
s <- terra::rast(f)
}
rastReader <- function(x, p2proc){
p <- file.path(p2proc, x, 'geomorphology')
f <- file.path(p, list.files(p))
f <- f[! grepl('D8pntr|basins|DEM', f) ] # remove the D8pntr & Basins
s <- terra::rast(f)
}
stack <- rastReader('dem_1arc')
stack <- rastReader('dem_1arc', p2proc)
rastReader <- function(x, p2proc){
# get the first level of files.
f <- file.path(p2proc, x, list.files(file.path(p2proc, x), pattern = '.tif$'))
geo_f <- file.path(p2proc, x, 'geomorphology',
list.files(file.path(p2proc, x, 'geomorphology')))
geo_f <- geo_f[! grepl('D8pntr|basins|DEM', geo_f) ] # remove the D8pntr & Basins
# combine the file paths
f <- c(f, geo_f)
s <- terra::rast(f)
}
rastReader <- function(x, p2proc){
# get the first level of files.
f <- file.path(p2proc, x, list.files(file.path(p2proc, x), pattern = '.tif$'))
geo_f <- file.path(p2proc, x, 'geomorphology',
list.files(file.path(p2proc, x, 'geomorphology')))
geo_f <- geo_f[! grepl('D8pntr|basins|DEM', geo_f) ] # remove the D8pntr & Basins
# combine the file paths
f <- c(f, geo_f)
s <- terra::rast(f)
}
stack <- rastReader('dem_1arc', p2proc)
View(stack)
rastReader <- function(x, p2proc){
# create paths for the first level of files.
f <- file.path(p2proc, x, list.files(file.path(p2proc, x), pattern = '.tif$'))
# create paths for the geomorphology files.
geo_f <- file.path(p2proc, x, 'geomorphology',
list.files(file.path(p2proc, x, 'geomorphology')))
geo_f <- geo_f[! grepl('D8pntr|basins|DEM', geo_f) ] # remove the D8pntr & Basins
# combine the file paths
f <- c(f, geo_f)
s <- terra::rast(f)
}
stack <- rastReader('dem_1arc', p2proc)
rm(p2proc)
res <- c('3arc', '1arc', '1-3arc', '3m')
rastReader <- function(x, p2proc){
# create paths for the first level of files.
f <- file.path(p2proc, x, list.files(file.path(p2proc, x), pattern = '.tif$'))
# create paths for the geomorphology files.
geo_f <- file.path(p2proc, x, 'geomorphology',
list.files(file.path(p2proc, x, 'geomorphology')))
geo_f <- geo_f[! grepl('D8pntr|basins|DEM', geo_f) ] # remove the D8pntr & Basins
# combine the file paths
f <- c(f, geo_f)
s <- terra::rast(f)
}
stacks <- lapply(res, rastReader, p2proc)
p2proc <- '../data/spatia/processed'
stacks <- lapply(res, rastReader, p2proc)
stack <- rastReader('dem_1arc', p2proc)
p2proc <- '../data/spatial/processed'
rastReader <- function(x, p2proc){
# create paths for the first level of files.
f <- file.path(p2proc, x, list.files(file.path(p2proc, x), pattern = '.tif$'))
# create paths for the geomorphology files.
geo_f <- file.path(p2proc, x, 'geomorphology',
list.files(file.path(p2proc, x, 'geomorphology')))
geo_f <- geo_f[! grepl('D8pntr|basins|DEM', geo_f) ] # remove the D8pntr & Basins
# combine the file paths
f <- c(f, geo_f)
s <- terra::rast(f)
}
stacks <- lapply(res, rastReader, p2proc)
rastReader <- function(x, p2proc){
# create paths for the first level of files.
f <- file.path(p2proc, x, list.files(file.path(p2proc, x), pattern = '.tif$'))
# create paths for the geomorphology files.
geo_f <- file.path(p2proc, x, 'geomorphology',
list.files(file.path(p2proc, x, 'geomorphology')))
geo_f <- geo_f[! grepl('D8pntr|basins|DEM', geo_f) ] # remove the D8pntr & Basins
# combine the file paths
f <- c(f, geo_f)
return(f)
s <- terra::rast(f)
}
stacks <- lapply(res, rastReader, p2proc)
View(stacks)
res
rastReader <- function(x, p2proc){
# create paths for the first level of files.
f <- file.path(p2proc, x, list.files(file.path(p2proc, x), pattern = '.tif$'))
return(f)
# create paths for the geomorphology files.
geo_f <- file.path(p2proc, x, 'geomorphology',
list.files(file.path(p2proc, x, 'geomorphology')))
geo_f <- geo_f[! grepl('D8pntr|basins|DEM', geo_f) ] # remove the D8pntr & Basins
# combine the file paths
f <- c(f, geo_f)
return(f)
s <- terra::rast(f)
}
stacks <- lapply(res, rastReader, p2proc)
View(stacks)
stack <- rastReader('dem_1arc', p2proc)
stack
rastReader <- function(x, p2proc){
# create paths for the first level of files.
f <- file.path(p2proc, x, list.files(file.path(p2proc, x), pattern = '.tif$'))
# create paths for the geomorphology files.
geo_f <- file.path(p2proc, x, 'geomorphology',
list.files(file.path(p2proc, x, 'geomorphology')))
geo_f <- geo_f[! grepl('D8pntr|basins|DEM', geo_f) ] # remove the D8pntr & Basins
# combine the file paths
f <- c(f, geo_f)
return(f)
s <- terra::rast(f)
}
stack <- rastReader('dem_1arc', p2proc)
stack
?lapply
stacks <- lapply(res, FUN = rastReader, p2proc)
View(stacks)
stacks <- lapply(X = res, FUN = rastReader, p2proc)
stacks <- apply(X = res, FUN = rastReader, p2proc)
stacks <- lapply(X = res, FUN = rastReader, p2proc)
View(stacks)
stack <- rastReader('dem_3arc', p2proc)
rastReader <- function(x, p2proc){
# create paths for the first level of files.
f <- file.path(p2proc, x, list.files(file.path(p2proc, x), pattern = '.tif$'))
# create paths for the geomorphology files.
geo_f <- file.path(p2proc, x, 'geomorphology',
list.files(file.path(p2proc, x, 'geomorphology')))
geo_f <- geo_f[! grepl('D8pntr|basins|DEM', geo_f) ] # remove the D8pntr & Basins
# combine the file paths
f <- c(f, geo_f)
s <- terra::rast(f)
}
stack <- rastReader('dem_3arc', p2proc)
View(stack)
View(stacks)
arc3 <- rastReader('dem_3arc', p2proc)
arc1 <- rastReader('dem_1arc', p2proc)
arc13 <- rastReader('dem_1-3arc', p2proc)
arc13 <- rastReader('dem_1-3arc', p2proc)
m3 <- rastReader('dem_3m', p2proc)
View(arc1)
View(occ_data)
occ_data <- bind_rows(
st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(Occurrence = 1) %>%
st_transform(32613),
st_read('../data/spatial/processed/pseudo-absences/iteration1/absences.shp', quiet = T) %>%
mutate(Occurrence = 0) %>%
sample_n(size = 125)
)
res <- c('3arc', '1arc', '1-3arc', '3m')
p2proc <- '../data/spatial/processed'
rastReader <- function(x, p2proc){
# create paths for the first level of files.
f <- file.path(p2proc, x, list.files(file.path(p2proc, x), pattern = '.tif$'))
# create paths for the geomorphology files.
geo_f <- file.path(p2proc, x, 'geomorphology',
list.files(file.path(p2proc, x, 'geomorphology')))
geo_f <- geo_f[! grepl('D8pntr|basins|DEM', geo_f) ] # remove the D8pntr & Basins
# combine the file paths
f <- c(f, geo_f)
s <- terra::rast(f)
}
arc3 <- rastReader('dem_3arc', p2proc)
arc1 <- rastReader('dem_1arc', p2proc)
arc13 <- rastReader('dem_1-3arc', p2proc)
m3 <- rastReader('dem_3m', p2proc)
rm(p2proc)
View(occ_data)
od3arc <- extract(occ_data, arc)
od3arc <- extract(occ_data, arc3)
od3arc <- extract(arc3, occ_data)
View(od3arc)
od3arc <- bind_cols(
select(occ_data, Occurrence),
extract(arc3, occ_data),
)
View(od3arc)
od3arc <- bind_cols(
select(occ_data, Occurrence),
select(extract(arc3, occ_data), -ID),
)
od3arc <- bind_cols(
select(occ_data, Occurrence),
select(extract(arc3, occ_data), -ID),
) %>%
drop_na()
od3arc <- bind_cols(
select(occ_data, Occurrence) %>% st_drop_geometry(),
select(extract(arc3, occ_data), -ID),
) %>%
drop_na()
View(od3arc)
BorutaRes <- Boruta::Boruta(Occurrence ~ ., data = od3arc, num.threads = cores, doTrace = 1)
cores <-p arallel::detectCores()
cores <- parallel::detectCores()
BorutaRes <- Boruta::Boruta(Occurrence ~ ., data = od3arc, num.threads = cores, doTrace = 1)
BorutaRes
importance <- Boruta::attStats(BorutaRes)
rn <- rownames(importance)
important_vars <- Boruta::getSelectedAttributes(BorutaRes, withTentative = F)
important_vars
importance
View(BorutaRes)
View(importance)
importance$decision %in% c('Confirmed', 'Tentative')
importance[importance$decision %in% c('Confirmed', 'Tentative'),]
cores <- parallel::detectCores()
BorutaRes <- Boruta::Boruta(Occurrence ~ ., data = od3arc, num.threads = cores, doTrace = 1)
BorutaRes <- Boruta::Boruta(Occurrence ~ ., data = od3arc, num.threads = cores, doTrace = 1)
importance <- Boruta::attStats(BorutaRes)
rn <- rownames(importance[importance$decision %in% c('Confirmed', 'Tentative'),])
BorutaRes
rn <- rownames(importance[importance$decision %in% c('Confirmed', 'Tentative'),])
important_vars <- Boruta::getSelectedAttributes(BorutaRes, withTentative = F)
important_vars
View(arc3)
select(od3arc, c('Occurrence', important_vars))
select(od3arc, all_of(c('Occurrence', important_vars)))
od3arc <- select(od3arc, all_of(c('Occurrence', important_vars)))
sdm_data_obj <- sdmData(formula = Occurrence~.,
train = od3arc)
library(sdm)
sdm_data_obj <- sdmData(formula = Occurrence~.,
train = od3arc)
sdm_model <- sdm(formula = Occurrence~.,
data = sdm_data_obj,
methods = c('rf','brt'), replication='sub', test.percent=30, n=2)
installAll()
sdm_model <- sdm(formula = Occurrence~.,
data = sdm_data_obj,
methods = c('rf','brt'), replication='sub', test.percent=30, n=2)
View(sdm_model)
sdm_model
od3arc <- bind_cols(
select(occ_data, Occurrence) %>% st_drop_geometry(),
select(extract(arc3, occ_data), -ID),
) %>%
drop_na() %>%
mutate(Occurence = factor(Occurrence))
library(tidyverse)
library(sf)
library(terra)
library(sdm)
occ_data <- bind_rows(
st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(Occurrence = 1) %>%
st_transform(32613),
st_read('../data/spatial/processed/pseudo-absences/iteration1/absences.shp', quiet = T) %>%
mutate(Occurrence = 0) %>%
sample_n(size = 125)
)
res <- c('3arc', '1arc', '1-3arc', '3m')
p2proc <- '../data/spatial/processed'
rastReader <- function(x, p2proc){
# create paths for the first level of files.
f <- file.path(p2proc, x, list.files(file.path(p2proc, x), pattern = '.tif$'))
# create paths for the geomorphology files.
geo_f <- file.path(p2proc, x, 'geomorphology',
list.files(file.path(p2proc, x, 'geomorphology')))
geo_f <- geo_f[! grepl('D8pntr|basins|DEM', geo_f) ] # remove the D8pntr & Basins
# combine the file paths
f <- c(f, geo_f)
s <- terra::rast(f)
}
arc3 <- rastReader('dem_3arc', p2proc)
arc1 <- rastReader('dem_1arc', p2proc)
arc13 <- rastReader('dem_1-3arc', p2proc)
m3 <- rastReader('dem_3m', p2proc)
od3arc <- bind_cols(
select(occ_data, Occurrence) %>% st_drop_geometry(),
select(extract(arc3, occ_data), -ID),
) %>%
drop_na() %>%
mutate(Occurence = factor(Occurrence))
od3arc <- bind_cols(
select(occ_data, Occurrence) %>% st_drop_geometry(),
select(extract(arc3, occ_data), -ID),
) %>%
drop_na() %>%
mutate(Occurence = as.factor(Occurrence))
