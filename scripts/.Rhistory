}
RC <- lapply(RC, countR)
}
dplyr::bind_rows(RC) |>
dplyr::arrange(OBJECT) |>
sf::st_as_sf()
}
# we'll just create the data sets at different resolutions right now...
# these are final for count data - no historic records have these attributes.
rt <- '../data/spatial/processed'
iter1_3m <- subset_pts(x = pres, res = 3, root = rt, mode = 'Count')
st_write(iter1_3m, '../data/DataModellingIter/3m-count.shp')
st_write(
subset_pts(x = pres, res = 3, root = rt, mode = 'Count'),
'../data/DataModellingIter/3m_count.shp', driver = '.shp')
st_write(
subset_pts(x = pres, res = 3, root = rt, mode = 'Count'),
'../data/DataModellingIter/3m_count.shp')
st_write(iter1_3m, '../data/DataModellingIter/3m-count.shp')
st_write(iter1_3m, '../data/3m-count.shp')
#'
#' @param x sf data set of presences and absences.
#' @param res Numeric. Simplified resolution as meters, one of 3, 10, 30, 90.
#' @param root Path to root of spatial data.
#' @param mode Character. One of 'Presence', 'Count', defaults to 'Presence'.
#' If running in 'Presence' mode, then select one record per raster cell, always
#' choosing a presence over an absence. If running in mode 'Count' sum all records
#' per raster cell, and relative the sample quadrat 3x3 m, to the size of the cell.
#' For example, if using a 90m cell, and their are three quadrats:
#'
subset_pts <- function(x, res, root, mode){
if(missing(mode)){mode <- 'Presence'}
res_string <- switch(as.character(res),
"3" = "3m",
"10" = "1-3arc",
"30" = "1arc",
"90" = "3arc",
stop("Input to `res` invalid. Need be one of: 3, 10, 30, 90")
)
within_hypotenuse <- sum(
as.numeric(
sf::st_distance(
x,
x[sf::st_nearest_feature(x),],
by_element = TRUE)
) < sqrt(2 * (res^2))
) # these records are possibly in the same cell as another
# record for the finest resolution modelling.
# doesn't fit very well. anyways on to the empirical method.
# message('As many as: ', within_hypotenuse/2, ' records could be dropped')
rasta <- terra::rast( # we only need to read in one raster - by definition these
# are all aligned to each other.
file.path(root, paste0('dem_' ,res_string), 'dem.tif')
)
x['RasterCell'] <- terra::extract(rasta, x, cells = TRUE)$cell
RC <- split(x, f = x$RasterCell)
if(mode=='Presence'){
# if there are multiple points per cell, 1st) discard the absences (if applicable)
# 2) randomly sample out one of the presences.
select_rec <- function(x){
# if only presenc==0 | presenc==1, sample randomly.
# if both presenc==0 and presenc==1 co-exist, sample from presenc==1,
if(nrow(x)>1){
if(all(x$Presenc==0) | all(x$Presenc==1) == TRUE){
x <- x[sample(1:nrow(x), 1),]
} else {
xsub <- x[x$Presenc==1,]
x <- xsub[sample(1:nrow(xsub), 1),]}
}
return(x)
}
RC <- lapply(RC, select_rec)
} else { # if mode == 'Count'
# area cell, area quadrant * mean plants per life stage.
countR <- function(x){
x$Prsnc_J <- ((res^2) / (3^2)) * mean(x$Prsnc_J)
x$Prsnc_M <- ((res^2) / (3^2)) * mean(x$Prsnc_M)
x$Prsnc_S <- ((res^2) / (3^2)) * mean(x$Prsnc_S, na.rm = TRUE)
x <- x[sample(1:nrow(x), 1),]
}
RC <- lapply(RC, countR)
}
dplyr::bind_rows(RC) |>
dplyr::arrange(OBJECT) |>
dplyr::select(-RasterCell)
sf::st_as_sf()
}
# we'll just create the data sets at different resolutions right now...
# these are final for count data - no historic records have these attributes.
rt <- '../data/spatial/processed'
iter1_3m <- subset_pts(x = pres, res = 3, root = rt, mode = 'Count')
#'
#' @param x sf data set of presences and absences.
#' @param res Numeric. Simplified resolution as meters, one of 3, 10, 30, 90.
#' @param root Path to root of spatial data.
#' @param mode Character. One of 'Presence', 'Count', defaults to 'Presence'.
#' If running in 'Presence' mode, then select one record per raster cell, always
#' choosing a presence over an absence. If running in mode 'Count' sum all records
#' per raster cell, and relative the sample quadrat 3x3 m, to the size of the cell.
#' For example, if using a 90m cell, and their are three quadrats:
#'
subset_pts <- function(x, res, root, mode){
if(missing(mode)){mode <- 'Presence'}
res_string <- switch(as.character(res),
"3" = "3m",
"10" = "1-3arc",
"30" = "1arc",
"90" = "3arc",
stop("Input to `res` invalid. Need be one of: 3, 10, 30, 90")
)
within_hypotenuse <- sum(
as.numeric(
sf::st_distance(
x,
x[sf::st_nearest_feature(x),],
by_element = TRUE)
) < sqrt(2 * (res^2))
) # these records are possibly in the same cell as another
# record for the finest resolution modelling.
# doesn't fit very well. anyways on to the empirical method.
# message('As many as: ', within_hypotenuse/2, ' records could be dropped')
rasta <- terra::rast( # we only need to read in one raster - by definition these
# are all aligned to each other.
file.path(root, paste0('dem_' ,res_string), 'dem.tif')
)
x['RasterCell'] <- terra::extract(rasta, x, cells = TRUE)$cell
RC <- split(x, f = x$RasterCell)
if(mode=='Presence'){
# if there are multiple points per cell, 1st) discard the absences (if applicable)
# 2) randomly sample out one of the presences.
select_rec <- function(x){
# if only presenc==0 | presenc==1, sample randomly.
# if both presenc==0 and presenc==1 co-exist, sample from presenc==1,
if(nrow(x)>1){
if(all(x$Presenc==0) | all(x$Presenc==1) == TRUE){
x <- x[sample(1:nrow(x), 1),]
} else {
xsub <- x[x$Presenc==1,]
x <- xsub[sample(1:nrow(xsub), 1),]}
}
return(x)
}
RC <- lapply(RC, select_rec)
} else { # if mode == 'Count'
# area cell, area quadrant * mean plants per life stage.
countR <- function(x){
x$Prsnc_J <- ((res^2) / (3^2)) * mean(x$Prsnc_J)
x$Prsnc_M <- ((res^2) / (3^2)) * mean(x$Prsnc_M)
x$Prsnc_S <- ((res^2) / (3^2)) * mean(x$Prsnc_S, na.rm = TRUE)
x <- x[sample(1:nrow(x), 1),]
}
RC <- lapply(RC, countR)
}
dplyr::bind_rows(RC) |>
dplyr::arrange(OBJECT) |>
dplyr::select(-RasterCell) |>
sf::st_as_sf()
}
iter1_3m <- subset_pts(x = pres, res = 3, root = rt, mode = 'Count')
st_write(iter1_3m, '../data/3m-count.shp')
st_write(iter1_3m, '../data/3m-count.shp', append = F)
st_write(
subset_pts(x = pres, res = 3, root = rt, mode = 'Count'),
'../data/DataModellingIter/3m_count.shp')
st_write(iter1_3m, '../data/3m-count.gpkg', append = F)
st_write(iter1_3m, '../data/DataModellingIter1/3m-count.gpkg', append = F)
st_write(
subset_pts(x = pres, res = 3, root = rt, mode = 'Count'),
'../data/DataModellingIter1/3m-count.gpkg')
st_write(
subset_pts(x = pres, res = 3, root = rt, mode = 'Count'),
'../data/DataModellingIter1/3m-count.gpkg', append = F)
st_write(subset_pts(x = pres, res = 10, root = rt, mode = 'Count'),
'../data/DataModellingIter1/10m-count.gpkg', append = F)
st_write(subset_pts(x = pres, res = 30, root = rt, mode = 'Count'),
'../data/DataModellingIter1/30m-count.gpkg', append = F)
st_write(subset_pts(x = pres, res = 90, root = rt, mode = 'Count'),
'../data/DataModellingIter1/90m-count.gpkg', append = F)
library(sf)
library(tidyverse)
library(terra)
set.seed(23)
source('functions.R')
occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
ID = 1:n(),
Occurrence = 1) %>%
st_transform(32613) %>%
distinct(eventDate, geometry, .keep_all = TRUE)
# we will also create an observation ID, any points within 50m of each other, collected
# on the same day as each other will be considered duplicates - hence an observation.
dts <- split(occ_data, f = occ_data$eventDate)
dts_l <- Filter(function(x) nrow(x) >= 2, dts)
dts_l <- lapply(dts_l, HistObsGrps) |>
bind_rows()
dts <- bind_rows(Filter(function(x) nrow(x) == 1, dts))
# now for simplicities sake we make a distinct 'Observation ID' to accompany
# all of the points records
occ_data <- bind_rows(dts, dts_l) |>
arrange(eventDate, Obs.grp) |>
group_by(eventDate, Obs.grp) |>
mutate(Occurrence.grp = cur_group_id(), .after = Occurrence) |>
select(-Obs.grp)
rm(dts, dts_l)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
ID = 1:n(),
Occurrence = 1) %>%
st_transform(32613) %>%
distinct(eventDate, geometry, .keep_all = TRUE)
pres <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = T)
gt2024 <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = T)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
ID = 1:n(),
Occurrence = 1) %>%
st_transform(32613) %>%
distinct(eventDate, geometry, .keep_all = TRUE)
gt2024 <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = T)
View(hist_occ_data)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
ID = 1:n(),
Presenc = 1) %>%
st_transform(32613) %>%
distinct(eventDate, geometry, .keep_all = TRUE)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1) %>%
st_transform(32613) %>%
distinct(eventDate, geometry, .keep_all = TRUE)
View(hist_occ_data)
gt2024 <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = T)
View(gt2024)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1,
Date = eventDate
) %>%
st_transform(32613) %>%
distinct(eventDate, geometry, .keep_all = TRUE)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1,
Date = eventDate
) %>%
st_transform(32613) %>%
distinct(Date, geometry, .keep_all = TRUE) %>%
select(-eventDate)
gt2024 <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = T) |>
mutate(Type = 'Current')
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1,
Date = eventDate,
Type = 'Historic'
) %>%
st_transform(32613) %>%
distinct(Date, geometry, .keep_all = TRUE) %>%
select(-eventDate)
gt2024 <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = T) |>
mutate(Type = 'Current')
View(hist_occ_data)
View(gt2024)
gt2024 <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = T) |>
mutate(Type = 'Current', .before = 'geometry')
#'
#' @param x sf data set of presences and absences.
#' @param res Numeric. Simplified resolution as meters, one of 3, 10, 30, 90.
#' @param root Path to root of spatial data.
#' @param mode Character. One of 'Presence', 'Count', defaults to 'Presence'.
#' If running in 'Presence' mode, then select one record per raster cell, always
#' choosing a presence over an absence. If running in mode 'Count' sum all records
#' per raster cell, and relative the sample quadrat 3x3 m, to the size of the cell.
#' For example, if using a 90m cell, and their are three quadrats:
#'
subset_pts <- function(x, res, root, mode){
if(missing(mode)){mode <- 'Presence'}
res_string <- switch(as.character(res),
"3" = "3m",
"10" = "1-3arc",
"30" = "1arc",
"90" = "3arc",
stop("Input to `res` invalid. Need be one of: 3, 10, 30, 90")
)
within_hypotenuse <- sum(
as.numeric(
sf::st_distance(
x,
x[sf::st_nearest_feature(x),],
by_element = TRUE)
) < sqrt(2 * (res^2))
) # these records are possibly in the same cell as another
# record for the finest resolution modelling.
# doesn't fit very well. anyways on to the empirical method.
# message('As many as: ', within_hypotenuse/2, ' records could be dropped')
rasta <- terra::rast( # we only need to read in one raster - by definition these
# are all aligned to each other.
file.path(root, paste0('dem_' ,res_string), 'dem.tif')
)
x['RasterCell'] <- terra::extract(rasta, x, cells = TRUE)$cell
RC <- split(x, f = x$RasterCell)
if(mode=='Presence'){
# if there are multiple points per cell, 1st) discard the absences (if applicable)
# 2) randomly sample out one of the presences.
select_rec <- function(x){
# if only presenc==0 | presenc==1, sample randomly.
# if both presenc==0 and presenc==1 co-exist, sample from presenc==1,
if(nrow(x)>1){
if(all(x$Presenc==0) | all(x$Presenc==1) == TRUE){
# remove the historic record if present.
if(length(unique(x$Type)==2)){
x <- x[x$Type=='Current',]
}
x <- x[sample(1:nrow(x), 1),]
} else {
# remove the historic record if present.
if(length(unique(x$Type)==2)){
x <- x[x$Type=='Current',]
}
xsub <- x[x$Presenc==1,]
x <- xsub[sample(1:nrow(xsub), 1),]}
}
return(x)
}
RC <- lapply(RC, select_rec)
} else { # if mode == 'Count'
# area cell, area quadrant * mean plants per life stage.
countR <- function(x){
x$Prsnc_J <- ((res^2) / (3^2)) * mean(x$Prsnc_J)
x$Prsnc_M <- ((res^2) / (3^2)) * mean(x$Prsnc_M)
x$Prsnc_S <- ((res^2) / (3^2)) * mean(x$Prsnc_S, na.rm = TRUE)
x <- x[sample(1:nrow(x), 1),]
}
RC <- lapply(RC, countR)
}
dplyr::bind_rows(RC) |>
dplyr::arrange(OBJECT) |>
dplyr::select(-RasterCell) |>
sf::st_as_sf()
}
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1,
Date = eventDate,
Type = 'Historic'
) %>%
st_transform(32613) %>%
distinct(Date, geometry, .keep_all = TRUE) %>%
select(-eventDate)
dplyr::bind_rows(gt2024, hist_occ_data)
View(hist_occ_data)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1,
Date = gsub('-', '.', as.character(eventDate)),
Type = 'Historic'
) %>%
st_transform(32613) %>%
distinct(Date, geometry, .keep_all = TRUE) %>%
select(-eventDate)
dplyr::bind_rows(gt2024, hist_occ_data)
subset_pts(x = gt2024, res = 90, root = rt, mode = 'Presence')
all_pts <- dplyr::bind_rows(gt2024, hist_occ_data)
subset_pts(x = all_pts, res = 90, root = rt, mode = 'Presence')
all_pts
subset_pts(x = all_pts, res = 90, root = rt, mode = 'Presence')
# we'll just create the data sets at different resolutions right now...
# these are final for count data - no historic records have these attributes.
rt <- '../data/spatial/processed'
rt <- '../data/spatial/processed'
subset_pts(x = all_pts, res = 90, root = rt, mode = 'Presence')
pts <- subset_pts(x = all_pts, res = 90, root = rt, mode = 'Presence')
View(pts)
st_write(subset_pts(x = gt2024, res = 90, root = rt, mode = 'Presence'),
'../data/DataModellingIter1/3m-presence.gpkg', append = F)
st_write(subset_pts(x = gt2024, res = 90, root = rt, mode = 'Presence'),
'../data/DataModellingIter1/90m-presence.gpkg', append = F)
st_write(subset_pts(x = gt2024, res = 3, root = rt, mode = 'Presence'),
'../data/DataModellingIter1/3m-presence.gpkg', append = F)
st_write(subset_pts(x = all_pts, res = 3, root = rt, mode = 'Presence'),
'../data/DataModellingIter1/3m-presence.gpkg', append = F)
st_write(subset_pts(x = all_pts, res = 10, root = rt, mode = 'Presence'),
'../data/DataModellingIter1/10m-presence.gpkg', append = F)
st_write(subset_pts(x = all_pts, res = 30, root = rt, mode = 'Presence'),
'../data/DataModellingIter1/30m-presence.gpkg', append = F)
st_write(subset_pts(x = all_pts, res = 90, root = rt, mode = 'Presence'),
'../data/DataModellingIter1/90m-presence.gpkg', append = F)
rm(all_pts, gt2024)
rm(all_pts, gt2024, rt)
rm(gt2024, rt)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1,
Date = gsub('-', '.', as.character(eventDate)),
Type = 'Historic'
) %>%
st_transform(32613) %>%
distinct(Date, geometry, .keep_all = TRUE) %>%
select(-eventDate)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1,
Date = gsub('-', '.', as.character(eventDate)),
Type = 'Historic'
) %>%
st_transform(32613) %>%
distinct(Date, geometry, .keep_all = TRUE) %>%
select(-eventDate)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1,
Date = gsub('-', '.', as.character(eventDate)),
Type = 'Historic'
) %>%
st_transform(32613) %>%
distinct(Date, geometry, .keep_all = TRUE) %>%
select(-eventDate)
rt <- '../data/spatial/processed'
st_write(subset_pts(x = hist_occ_data, res = 3, root = rt, mode = 'Presence'),
'../data/Data4modelling/3m-presence-iter0.gpkg', append = F)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1,
Date = gsub('-', '.', as.character(eventDate)),
Type = 'Historic',
OBJECT = 1:n()
) %>%
st_transform(32613) %>%
distinct(Date, geometry, .keep_all = TRUE) %>%
select(-eventDate)
rt <- '../data/spatial/processed'
st_write(subset_pts(x = hist_occ_data, res = 3, root = rt, mode = 'Presence'),
'../data/Data4modelling/3m-presence-iter0.gpkg', append = F)
st_write(subset_pts(x = all_pts, res = 10, root = rt, mode = 'Presence'),
'../data/Data4modelling/10m-presence-iter0.gpkg', append = F)
st_write(subset_pts(x = hist_occ_data, res = 10, root = rt, mode = 'Presence'),
'../data/Data4modelling/10m-presence-iter0.gpkg', append = F)
st_write(subset_pts(x = hist_occ_data, res = 30, root = rt, mode = 'Presence'),
'../data/Data4modelling/30m-presence-iter0.gpkg', append = F)
st_write(subset_pts(x = hist_occ_data, res = 90, root = rt, mode = 'Presence'),
'../data/Data4modelling/90m-presence-iter0.gpkg', append = F)
library(sf)
library(tidyverse)
library(terra)
source('functions.R')
set.seed(23)
library(sf)
library(tidyverse)
library(terra)
set.seed(23)
source('functions.R')
gt2024 <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = T)
# we'll just create the data sets at different resolutions right now...
# these are final for count data - no historic records have these attributes.
st_write(subset_pts(x = gt2024, res = 3, root = rt, mode = 'Count'),
'../data/Data4modelling/3m-count-iter1.gpkg', append = F)
# we'll just create the data sets at different resolutions right now...
# these are final for count data - no historic records have these attributes.
rt <- '../data/spatial/processed'
st_write(subset_pts(x = gt2024, res = 3, root = rt, mode = 'Count'),
'../data/Data4modelling/3m-count-iter1.gpkg', append = F)
st_write(subset_pts(x = gt2024, res = 3, root = rt, mode = 'Count'),
'../data/Data4modelling/3m-count-iter1.gpkg', append = F)
st_write(subset_pts(x = gt2024, res = 10, root = rt, mode = 'Count'),
'../data/Data4modelling/10m-count-iter1..gpkg', append = F)
st_write(subset_pts(x = gt2024, res = 30, root = rt, mode = 'Count'),
'../data/Data4modelling/30m-count-iter1..gpkg', append = F)
st_write(subset_pts(x = gt2024, res = 90, root = rt, mode = 'Count'),
'../data/Data4modelling/90m-count-iter1..gpkg', append = F)
rm(gt2024, rt)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1,
Date = gsub('-', '.', as.character(eventDate)),
Type = 'Historic',
OBJECT = 1:n()
) %>%
st_transform(32613) %>%
distinct(Date, geometry, .keep_all = TRUE) %>%
select(-eventDate)
rt <- '../data/spatial/processed'
st_write(subset_pts(x = hist_occ_data, res = 3, root = rt, mode = 'Presence'),
'../data/Data4modelling/3m-presence-iter0.gpkg', append = F)
st_write(subset_pts(x = hist_occ_data, res = 10, root = rt, mode = 'Presence'),
'../data/Data4modelling/10m-presence-iter0.gpkg', append = F)
st_write(subset_pts(x = hist_occ_data, res = 30, root = rt, mode = 'Presence'),
'../data/Data4modelling/30m-presence-iter0.gpkg', append = F)
st_write(subset_pts(x = hist_occ_data, res = 90, root = rt, mode = 'Presence'),
'../data/Data4modelling/90m-presence-iter0.gpkg', append = F)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1,
Date = gsub('-', '.', as.character(eventDate)),
Type = 'Historic'
) %>%
st_transform(32613) %>%
distinct(Date, geometry, .keep_all = TRUE) %>%
select(-eventDate)
gt2024 <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = T) |>
mutate(Type = 'Current', .before = 'geometry')
all_pts <- dplyr::bind_rows(gt2024, hist_occ_data)
rt <- '../data/spatial/processed'
st_write(subset_pts(x = all_pts, res = 3, root = rt, mode = 'Presence'),
'../data/Data4modelling/3m-presence-iter1.gpkg', append = F)
st_write(subset_pts(x = all_pts, res = 10, root = rt, mode = 'Presence'),
'../data/Data4modelling/10m-presence-iter1.gpkg', append = F)
st_write(subset_pts(x = all_pts, res = 30, root = rt, mode = 'Presence'),
'../data/Data4modelling/30m-presence-iter1.gpkg', append = F)
st_write(subset_pts(x = all_pts, res = 90, root = rt, mode = 'Presence'),
'../data/Data4modelling/90m-presence-iter1.gpkg', append = F)
rm(all_pts, gt2024, rt)
