library(CDSE)
library(terra)
library(sf)
library(tidyverse)
library(sf)
library(terra)
setwd('/media/steppe/hdd/EriogonumColoradenseTaxonomy/scripts')
# first we will create a domain for all analysis. The 'closest' this bounding box is to a known
# occurrence is 10 miles. The furthest distances vary.
domain <- sf::st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
st_union() %>%
st_transform(32613) %>%
st_buffer(16093) %>%
st_transform(4326) %>%
vect()
ext(domain)
template <- rast(project(domain, 'EPSG:32613'), nrows = 5, ncols = 5)
# now we will assemble single DEM tifs which cover our domain
OAuthClient <- GetOAuthClient(
id = Sys.getenv("CopernicusOAuthIDNORTHWESTERN"),
secret = Sys.getenv("CopernicusOAuthSecretNORTHWESTERN")
)
script_file <- '/media/steppe/hdd/EriogonumColoradenseTaxonomy/scripts/NDSI_download.js'
aoi <- st_as_sfc(st_bbox(template))
catalog_results <- SearchCatalog(
aoi = aoi,
from = as.Date('2017-05-01'), to = as.Date('2024-08-01'),
# first relevant flights are in 2017, a was flying in 2016,
# but we'll just skip that year to make writing methods easier
collection = "sentinel-2-l2a",
client = OAuthClient
)
cr <- catalog_results |>
mutate(Month = as.numeric(str_remove_all(str_extract(acquisitionDate, '-[0-9]{2}-'), '-'))) |>
filter(Month >= 5, Month <= 7) |> # we want to detect late laying snow packs
group_by(acquisitionDate) |>
# only bother with tiles which have good coverage on that day! No need for random tiles.
mutate(
totalArea = sum(areaCoverage),
n = n()) |>
filter(n > 4 & totalArea >= 100) |>
# NDSI cannot see through clouds, we will drop dates with
# very high cloud cover
group_by(acquisitionDate) |>
mutate(
meanCloud = mean(tileCloudCover)
) |>
filter(meanCloud <= 40) |>
# for visualizing whether we have an OK cloud drop off time
mutate(
year = str_extract(acquisitionDate, '[0-9]{4}'),
doy = yday(acquisitionDate)
)
script_file <- '/media/steppe/hdd/EriogonumColoradenseTaxonomy/scripts/NDSI_download.js'
aoi <- st_as_sfc(st_bbox(template))
catalog_results <- SearchCatalog(
aoi = aoi,
from = as.Date('2017-05-01'), to = as.Date('2024-08-01'),
# first relevant flights are in 2017, a was flying in 2016,
# but we'll just skip that year to make writing methods easier
collection = "sentinel-2-l2a",
client = OAuthClient
)
Sys.getenv("CopernicusOAuthSecretNORTHWESTERN")
Sys.getenv("CopernicusOAuthSecretNORTHWESTERN")
library(sf)
library(tidyverse)
library(terra)
source('functions.R')
set.seed(23)
ground_truth <- read.csv('../data/GroundTruthing/Pts.csv') |>
mutate(
across(c('Dominant_Phen'), ~ na_if(., '')),
across(Presence_M:Presence_J, ~ replace_na(., 0)))
rand_pts_iter1 <- st_read('../data/GroundTruthPts/Iteration1-cp.shp', quiet = T) |>
select(UID) %>%
inner_join(., ground_truth, by = c('UID' = 'GlobalRandomID')) |>
mutate(Site = paste0('r-', UID)) |>
select(-Latitude, -Longitude, -UID)
ground_truth <- filter(ground_truth, is.na(GlobalRandomID)) # remove these random pts
revisits <- st_read('../data/GroundTruthPts/Revisits-cp.shp', quiet = T) |>
select(UID) |>
mutate(UID = str_replace(UID, 'P', 'p')) %>%
inner_join(., filter(ground_truth, str_detect(Site, 'p')), by = c('UID' = 'Site'))
ground_truth <- filter(ground_truth, str_detect(Site, 'p', negate= T)) |>
select(-GlobalRandomID) |>
st_as_sf(coords = c(x = 'Longitude', y = 'Latitude'), crs = 4269) |>
st_transform(st_crs(revisits))
revisits <- filter(revisits, !is.na(Latitude)) |>
st_drop_geometry() |>
st_as_sf(coords = c(x = 'Longitude', y = 'Latitude'), crs = 4269) |>
st_transform(st_crs(revisits)) %>%
bind_rows(., filter(revisits, is.na(Latitude))) |>
mutate(Site = UID) |>
select(-Latitude, -Longitude, -UID)
ground_truth <- bind_rows(ground_truth, rand_pts_iter1, revisits) |>
select(-GlobalRandomID) %>%
mutate(Presence = ifelse(Presence_M > 0 | Presence_J > 0, 1, 0), .after = Presence_J)
st_write(ground_truth, '../data/GroundTruthing/QC.shp', append = F)
rm(rand_pts_iter1, revisits)
gt_pres <- filter(ground_truth, Presence == 1) |>
dplyr::select(NAME = OBJECT) |>
sf::st_write(dsn = '../data/GroundTruthing/Presences.kml', driver = 'kml',
quiet = T, append = F)
gt_abs <- filter(ground_truth, Presence == 0) |>
dplyr::select(NAME = OBJECT) |>
sf::st_write(dsn = '../data/GroundTruthing/Absences.kml', driver = 'kml',
quiet = T, append = F)
comp_abs <- read.csv('../data/GroundTruthing/ComputerAbs.csv') |>
mutate(Presence_M = 0, Presence_J = 0, Presence = 0) |>
st_as_sf(coords = c(x = 'Longitude', y = 'Latitude'), crs = 4326) |>
st_transform(st_crs(ground_truth))
ab <- bind_rows(ground_truth, comp_abs) |>
st_write('../data/GroundTruthing/Iteration1Pts.shp', append = F)
library(spdep)
nn5 = knn2nb(knearneigh(ab, 8))
w = nb2listw(nn5, style="B")
joincount.test( as.factor(ab$Presence), w)
'../data/GroundTruthing/Iteration1Pts.shp'
st_read('../data/GroundTruthing/Iteration1Pts.shp')
iter1 <- st_read('../data/GroundTruthing/Iteration1Pts.shp')
View(iter1)
iter1gt <- st_read('../data/GroundTruthing/Iteration1Pts.shp')
library(sf)
library(tidyverse)
library(terra)
source('functions.R')
set.seed(23)
ground_truth <- read.csv('../data/GroundTruthing/Pts.csv') |>
mutate(
across(c('Dominant_Phen'), ~ na_if(., '')),
across(Presence_M:Presence_J, ~ replace_na(., 0)))
rand_pts_iter1 <- st_read('../data/GroundTruthPts/Iteration1-cp.shp', quiet = T) |>
select(UID) %>%
inner_join(., ground_truth, by = c('UID' = 'GlobalRandomID')) |>
mutate(Site = paste0('r-', UID)) |>
select(-Latitude, -Longitude, -UID)
ground_truth <- filter(ground_truth, is.na(GlobalRandomID)) # remove these random pts
revisits <- st_read('../data/GroundTruthPts/Revisits-cp.shp', quiet = T) |>
select(UID) |>
mutate(UID = str_replace(UID, 'P', 'p')) %>%
inner_join(., filter(ground_truth, str_detect(Site, 'p')), by = c('UID' = 'Site'))
ground_truth <- filter(ground_truth, str_detect(Site, 'p', negate= T)) |>
select(-GlobalRandomID) |>
st_as_sf(coords = c(x = 'Longitude', y = 'Latitude'), crs = 4269) |>
st_transform(st_crs(revisits))
revisits <- filter(revisits, !is.na(Latitude)) |>
st_drop_geometry() |>
st_as_sf(coords = c(x = 'Longitude', y = 'Latitude'), crs = 4269) |>
st_transform(st_crs(revisits)) %>%
bind_rows(., filter(revisits, is.na(Latitude))) |>
mutate(Site = UID) |>
select(-Latitude, -Longitude, -UID)
ground_truth <- bind_rows(ground_truth, rand_pts_iter1, revisits) |>
select(-GlobalRandomID) %>%
mutate(Presence = ifelse(Presence_M > 0 | Presence_J > 0, 1, 0), .after = Presence_J)
View(ground_truth)
library(sf)
library(tidyverse)
library(terra)
source('functions.R')
set.seed(23)
ground_truth <- read.csv('../data/GroundTruthing/Pts.csv') |>
mutate(
across(c('Dominant_Phen'), ~ na_if(., '')),
across(Presence_M:Presence_J, ~ replace_na(., 0)))
rand_pts_iter1 <- st_read('../data/GroundTruthPts/Iteration1-cp.shp', quiet = T) |>
select(UID) %>%
inner_join(., ground_truth, by = c('UID' = 'GlobalRandomID')) |>
mutate(Site = paste0('r-', UID)) |>
select(-Latitude, -Longitude, -UID)
ground_truth <- filter(ground_truth, is.na(GlobalRandomID)) # remove these random pts
revisits <- st_read('../data/GroundTruthPts/Revisits-cp.shp', quiet = T) |>
select(UID) |>
mutate(UID = str_replace(UID, 'P', 'p')) %>%
inner_join(., filter(ground_truth, str_detect(Site, 'p')), by = c('UID' = 'Site'))
ground_truth <- filter(ground_truth, str_detect(Site, 'p', negate= T)) |>
select(-GlobalRandomID) |>
st_as_sf(coords = c(x = 'Longitude', y = 'Latitude'), crs = 4269) |>
st_transform(st_crs(revisits))
revisits <- filter(revisits, !is.na(Latitude)) |>
st_drop_geometry() |>
st_as_sf(coords = c(x = 'Longitude', y = 'Latitude'), crs = 4269) |>
st_transform(st_crs(revisits)) %>%
bind_rows(., filter(revisits, is.na(Latitude))) |>
mutate(Site = UID) |>
select(-Latitude, -Longitude, -UID)
ground_truth <- bind_rows(ground_truth, rand_pts_iter1, revisits) |>
select(-GlobalRandomID) %>%
mutate(Presence = ifelse(Presence_M > 0 | Presence_J > 0, 1, 0), .after = Presence_J)
View(ground_truth)
st_write(ground_truth, '../data/GroundTruthing/QC.shp', append = F)
rm(rand_pts_iter1, revisits)
comp_abs <- read.csv('../data/GroundTruthing/ComputerAbs.csv') |>
mutate(Presence_M = 0, Presence_J = 0, Presence = 0) |>
st_as_sf(coords = c(x = 'Longitude', y = 'Latitude'), crs = 4326) |>
st_transform(st_crs(ground_truth))
View(comp_abs)
View(ground_truth)
comp_abs <- read.csv('../data/GroundTruthing/ComputerAbs.csv') |>
mutate(
Presence_M = 0, Presence_J = 0, Presence = 0 ) |>
st_as_sf(coords = c(x = 'Longitude', y = 'Latitude'), crs = 4326) |>
st_transform(st_crs(ground_truth))
ab <- bind_rows(ground_truth, comp_abs) |>
st_write('../data/GroundTruthing/Iteration1Pts.shp', append = F)
library(spdep)
nn5 = knn2nb(knearneigh(ab, 8))
w = nb2listw(nn5, style="B")
joincount.test( as.factor(ab$Presence), w)
occ_data <- bind_rows(
st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(Occurrence = 1) %>%
st_transform(32613),
st_read('../data/spatial/processed/pseudo-absences/iteration1/absences.shp', quiet = T)
)
res <- c('3arc', '1arc', '1-3arc', '3m')
p2proc <- '../data/spatial/processed'
iter1gt <- st_read('../data/GroundTruthing/Iteration1Pts.shp')
View(iter1gt)
View(iter1gt)
View(occ_data)
plot(occ_data)
library(tidyverse)
library(sf)
setwd('~/Documents/assoRted/EriogonumColoradenseTaxonomy/scripts')
library(tidyverse)
library(sf)
setwd('~/Documents/assoRted/EriogonumColoradenseTaxonomy/scripts')
library(tidyverse)
library(sf)
setwd('~/Documents/assoRted/EriogonumColoradenseTaxonomy/scripts')
inat <- read.csv('../data/collections/iNaturalistObservations/observations-417874.csv') %>%
filter(positional_accuracy <= 10) %>%
st_as_sf(coords = c('longitude', 'latitude'), crs = 4326) %>%
select(id, observed_on, user_login, quality_grade)
setwd('~/Documents/assoRted/EriogonumColoradenseTaxonomy/scripts')
inat <- read.csv('../data/collections/iNaturalistObservations/observations-417874.csv') %>%
filter(positional_accuracy <= 10) %>%
st_as_sf(coords = c('longitude', 'latitude'), crs = 4326) %>%
select(id, observed_on, user_login, quality_grade)
soro <- readr::read_csv('../data/collections/SoroSymbiota/occurrences.csv', show_col_types = FALSE) %>%
drop_na(decimalLatitude, decimalLongitude) %>%
st_as_sf(coords = c('decimalLongitude', 'decimalLatitude'), crs = 4326) %>%
select(georeferenceRemarks, georeferencedBy,locality, eventDate, recordedBy,
identifiedBy, identificationRemarks, catalogNumber)
setwd('~/Documents/Ecoloradense/scripts')
library(tidyverse)
library(sf)
inat <- read.csv('../data/collections/iNaturalistObservations/observations-417874.csv') %>%
filter(positional_accuracy <= 10) %>%
st_as_sf(coords = c('longitude', 'latitude'), crs = 4326) %>%
select(id, observed_on, user_login, quality_grade)
inat <- read.csv('../data/collections/iNaturalistObservations/observations-417874.csv') %>%
filter(positional_accuracy <= 10) %>%
st_as_sf(coords = c('longitude', 'latitude'), crs = 4326) %>%
select(id, observed_on, user_login, quality_grade)
soro <- readr::read_csv('../data/collections/SoroSymbiota_coloradense/occurrences.csv', show_col_types = FALSE) %>%
drop_na(decimalLatitude, decimalLongitude) %>%
st_as_sf(coords = c('decimalLongitude', 'decimalLatitude'), crs = 4326) %>%
select(georeferenceRemarks, georeferencedBy,locality, eventDate, recordedBy,
identifiedBy, identificationRemarks, catalogNumber)
inat <- read.csv('../data/collections/iNaturalistObservations_coloradense/observations-417874.csv') %>%
filter(positional_accuracy <= 10) %>%
st_as_sf(coords = c('longitude', 'latitude'), crs = 4326) %>%
select(id, observed_on, user_login, quality_grade)
View(inat)
View(soro)
View(inat)
soro <- readr::read_csv('../data/collections/SoroSymbiota_coloradense/occurrences.csv', show_col_types = FALSE) %>%
drop_na(decimalLatitude, decimalLongitude) %>%
st_as_sf(coords = c('decimalLongitude', 'decimalLatitude'), crs = 4326) #%>%
View(soro)
library(sf)
library(tidyverse)
library(terra)
set.seed(23)
source('functions.R')
occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Occurrence = 1) %>%
st_transform(32613) %>%
distinct(eventDate, geometry, .keep_all = TRUE)
# we will also create an observation ID, any points within 50m of each other, collected
# on the same day as each other will be considered duplicates - hence an observation.
dts <- split(occ_data, f = occ_data$eventDate)
dts_l <- Filter(function(x) nrow(x) >= 2, dts)
dts_l <- lapply(dts_l, HistObsGrps) |>
bind_rows()
dts <- bind_rows(Filter(function(x) nrow(x) == 1, dts))
# now for simplicities sake we make a distinct 'Observation ID' to accompany
# all of the points records
occ_dat <- bind_rows(dts, dts_l) |>
arrange(eventDate, Obs.grp) |>
group_by(eventDate, Obs.grp) |>
mutate(Occurrence.grp = cur_group_id(), .after = Occurrence) |>
select(-Obs.grp)
rm(dts, dts_l)
View(occ_dat)
occ_dat
all_hist_pres <- st_read('../data/GroundTruthPts/Revisits-cp.shp')
iter1gt <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = TRUE) |>
filter(str_detect(Site, 'p.*')) |>
mutate(
Site = str_to_upper(Site)) |>
left_join(st_drop_geometry(all_hist_pres), by = c('Site' = 'UID'))
View(all_hist_pres)
# now subset the occurrence data to relevent dates
occ_data <- filter(occ_data, eventDate %in% iter1gt$eventDate)
table(sf::st_nearest_feature(occ_data, iter1gt))
table(sf::st_nearest_feature(iter1gt, occ_data))
table(occ_data$eventDate)[ table(occ_data$eventDate) > 1]
# neither method would be enough to match on on their own accord.
toclean <- left_join(occ_data, st_drop_geometry(iter1gt),
by = 'eventDate')
DIRTY <- toclean %>%
group_by(OBJECT) |>
mutate(n = n()) |>
filter(n > 1)
View(iter1gt)
View(DIRTY)
View(occ_data)
occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Occurrence = 1) %>%
st_transform(32613) %>%
distinct(eventDate, geometry, .keep_all = TRUE)
# we will also create an observation ID, any points within 50m of each other, collected
# on the same day as each other will be considered duplicates - hence an observation.
dts <- split(occ_data, f = occ_data$eventDate)
dts_l <- Filter(function(x) nrow(x) >= 2, dts)
dts_l <- lapply(dts_l, HistObsGrps) |>
bind_rows()
occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Occurrence = 1) %>%
st_transform(32613) %>%
distinct(eventDate, geometry, .keep_all = TRUE)
# we will also create an observation ID, any points within 50m of each other, collected
# on the same day as each other will be considered duplicates - hence an observation.
dts <- split(occ_data, f = occ_data$eventDate)
dts_l <- Filter(function(x) nrow(x) >= 2, dts)
dts_l <- lapply(dts_l, HistObsGrps) |>
bind_rows()
library(sf)
library(tidyverse)
library(terra)
set.seed(23)
source('functions.R')
occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Occurrence = 1) %>%
st_transform(32613) %>%
distinct(eventDate, geometry, .keep_all = TRUE)
# we will also create an observation ID, any points within 50m of each other, collected
# on the same day as each other will be considered duplicates - hence an observation.
dts <- split(occ_data, f = occ_data$eventDate)
dts_l <- Filter(function(x) nrow(x) >= 2, dts)
dts_l <- lapply(dts_l, HistObsGrps) |>
bind_rows()
dts <- bind_rows(Filter(function(x) nrow(x) == 1, dts))
# now for simplicities sake we make a distinct 'Observation ID' to accompany
# all of the points records
occ_dat <- bind_rows(dts, dts_l) |>
arrange(eventDate, Obs.grp) |>
group_by(eventDate, Obs.grp) |>
mutate(Occurrence.grp = cur_group_id(), .after = Occurrence)
rm(dts, dts_l)
all_hist_pres <- st_read('../data/GroundTruthPts/Revisits-cp.shp')
iter1gt <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = TRUE) |>
filter(str_detect(Site, 'p.*')) |>
mutate(
Site = str_to_upper(Site)) |>
left_join(st_drop_geometry(all_hist_pres), by = c('Site' = 'UID'))
# now subset the occurrence data to relevent dates
occ_data <- filter(occ_data, eventDate %in% iter1gt$eventDate)
table(sf::st_nearest_feature(occ_data, iter1gt))
# not super informative, because I didn't cover the full range of the species.
# i'd wager the highest number point is simply my easternmost point!
table(sf::st_nearest_feature(iter1gt, occ_data))
# whereas this indicates most points I visited are close to a neighbor in the historic data set
table(occ_data$eventDate)[ table(occ_data$eventDate) > 1]
# yep lot's of repeat dates!!! hopefully from multiple observations...
# rm(all_hist_pres)
# neither method would be enough to match on on their own accord.
toclean <- left_join(occ_data, st_drop_geometry(iter1gt),
by = 'eventDate')
DIRTY <- toclean %>%
group_by(OBJECT) |>
mutate(n = n()) |>
filter(n > 1)
View(DIRTY)
View(occ_data)
occ_dat <- bind_rows(dts, dts_l) |>
arrange(eventDate, Obs.grp) |>
group_by(eventDate, Obs.grp) |>
mutate(Occurrence.grp = cur_group_id(), .after = Occurrence)
occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Occurrence = 1) %>%
st_transform(32613) %>%
distinct(eventDate, geometry, .keep_all = TRUE)
# we will also create an observation ID, any points within 50m of each other, collected
# on the same day as each other will be considered duplicates - hence an observation.
dts <- split(occ_data, f = occ_data$eventDate)
dts_l <- Filter(function(x) nrow(x) >= 2, dts)
dts_l <- lapply(dts_l, HistObsGrps) |>
bind_rows()
dts <- bind_rows(Filter(function(x) nrow(x) == 1, dts))
# now for simplicities sake we make a distinct 'Observation ID' to accompany
# all of the points records
occ_dat <- bind_rows(dts, dts_l) |>
arrange(eventDate, Obs.grp) |>
group_by(eventDate, Obs.grp) |>
mutate(Occurrence.grp = cur_group_id(), .after = Occurrence)
rm(dts, dts_l)
View(occ_data)
source('functions.R')
occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Occurrence = 1) %>%
st_transform(32613) %>%
distinct(eventDate, geometry, .keep_all = TRUE)
dts <- split(occ_data, f = occ_data$eventDate)
dts_l <- Filter(function(x) nrow(x) >= 2, dts)
dts_l <- lapply(dts_l, HistObsGrps) |>
bind_rows()
dts <- bind_rows(Filter(function(x) nrow(x) == 1, dts))
occ_dat <- bind_rows(dts, dts_l) |>
arrange(eventDate, Obs.grp) |>
group_by(eventDate, Obs.grp) |>
mutate(Occurrence.grp = cur_group_id(), .after = Occurrence)
library(sf)
library(tidyverse)
library(terra)
set.seed(23)
source('functions.R')
occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Occurrence = 1) %>%
st_transform(32613) %>%
distinct(eventDate, geometry, .keep_all = TRUE)
# we will also create an observation ID, any points within 50m of each other, collected
# on the same day as each other will be considered duplicates - hence an observation.
dts <- split(occ_data, f = occ_data$eventDate)
dts_l <- Filter(function(x) nrow(x) >= 2, dts)
dts_l <- lapply(dts_l, HistObsGrps) |>
bind_rows()
dts <- bind_rows(Filter(function(x) nrow(x) == 1, dts))
# now for simplicities sake we make a distinct 'Observation ID' to accompany
# all of the points records
occ_data <- bind_rows(dts, dts_l) |>
arrange(eventDate, Obs.grp) |>
group_by(eventDate, Obs.grp) |>
mutate(Occurrence.grp = cur_group_id(), .after = Occurrence)
rm(dts, dts_l)
all_hist_pres <- st_read('../data/GroundTruthPts/Revisits-cp.shp')
iter1gt <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = TRUE) |>
filter(str_detect(Site, 'p.*')) |>
mutate(
Site = str_to_upper(Site)) |>
left_join(st_drop_geometry(all_hist_pres), by = c('Site' = 'UID'))
# now subset the occurrence data to relevent dates
occ_data <- filter(occ_data, eventDate %in% iter1gt$eventDate)
table(sf::st_nearest_feature(occ_data, iter1gt))
# not super informative, because I didn't cover the full range of the species.
# i'd wager the highest number point is simply my easternmost point!
table(sf::st_nearest_feature(iter1gt, occ_data))
# whereas this indicates most points I visited are close to a neighbor in the historic data set
table(occ_data$eventDate)[ table(occ_data$eventDate) > 1]
# yep lot's of repeat dates!!! hopefully from multiple observations...
# rm(all_hist_pres)
# neither method would be enough to match on on their own accord.
toclean <- left_join(occ_data, st_drop_geometry(iter1gt),
by = 'eventDate')
DIRTY <- toclean %>%
group_by(OBJECT) |>
mutate(n = n()) |>
filter(n > 1)
View(DIRTY)
library(sf)
library(tidyverse)
library(terra)
set.seed(23)
source('functions.R')
occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Occurrence = 1) %>%
st_transform(32613) %>%
distinct(eventDate, geometry, .keep_all = TRUE)
# we will also create an observation ID, any points within 50m of each other, collected
# on the same day as each other will be considered duplicates - hence an observation.
dts <- split(occ_data, f = occ_data$eventDate)
dts_l <- Filter(function(x) nrow(x) >= 2, dts)
dts_l <- lapply(dts_l, HistObsGrps) |>
bind_rows()
dts <- bind_rows(Filter(function(x) nrow(x) == 1, dts))
# now for simplicities sake we make a distinct 'Observation ID' to accompany
# all of the points records
occ_data <- bind_rows(dts, dts_l) |>
arrange(eventDate, Obs.grp) |>
group_by(eventDate, Obs.grp) |>
mutate(Occurrence.grp = cur_group_id(), .after = Occurrence) |>
select(-Obs.grp)
rm(dts, dts_l)
all_hist_pres <- st_read('../data/GroundTruthPts/Revisits-cp.shp')
iter1gt <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = TRUE) |>
filter(str_detect(Site, 'p.*')) |>
mutate(
Site = str_to_upper(Site)) |>
left_join(st_drop_geometry(all_hist_pres), by = c('Site' = 'UID'))
# now subset the occurrence data to relevent dates
