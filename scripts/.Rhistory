library(sf)
library(tidyverse)
library(terra)
source('functions.R')
set.seed(23)
library(sf)
library(tidyverse)
library(terra)
set.seed(23)
source('functions.R')
gt2024 <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = T)
# we'll just create the data sets at different resolutions right now...
# these are final for count data - no historic records have these attributes.
st_write(subset_pts(x = gt2024, res = 3, root = rt, mode = 'Count'),
'../data/Data4modelling/3m-count-iter1.gpkg', append = F)
# we'll just create the data sets at different resolutions right now...
# these are final for count data - no historic records have these attributes.
rt <- '../data/spatial/processed'
st_write(subset_pts(x = gt2024, res = 3, root = rt, mode = 'Count'),
'../data/Data4modelling/3m-count-iter1.gpkg', append = F)
st_write(subset_pts(x = gt2024, res = 3, root = rt, mode = 'Count'),
'../data/Data4modelling/3m-count-iter1.gpkg', append = F)
st_write(subset_pts(x = gt2024, res = 10, root = rt, mode = 'Count'),
'../data/Data4modelling/10m-count-iter1..gpkg', append = F)
st_write(subset_pts(x = gt2024, res = 30, root = rt, mode = 'Count'),
'../data/Data4modelling/30m-count-iter1..gpkg', append = F)
st_write(subset_pts(x = gt2024, res = 90, root = rt, mode = 'Count'),
'../data/Data4modelling/90m-count-iter1..gpkg', append = F)
rm(gt2024, rt)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1,
Date = gsub('-', '.', as.character(eventDate)),
Type = 'Historic',
OBJECT = 1:n()
) %>%
st_transform(32613) %>%
distinct(Date, geometry, .keep_all = TRUE) %>%
select(-eventDate)
rt <- '../data/spatial/processed'
st_write(subset_pts(x = hist_occ_data, res = 3, root = rt, mode = 'Presence'),
'../data/Data4modelling/3m-presence-iter0.gpkg', append = F)
st_write(subset_pts(x = hist_occ_data, res = 10, root = rt, mode = 'Presence'),
'../data/Data4modelling/10m-presence-iter0.gpkg', append = F)
st_write(subset_pts(x = hist_occ_data, res = 30, root = rt, mode = 'Presence'),
'../data/Data4modelling/30m-presence-iter0.gpkg', append = F)
st_write(subset_pts(x = hist_occ_data, res = 90, root = rt, mode = 'Presence'),
'../data/Data4modelling/90m-presence-iter0.gpkg', append = F)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1,
Date = gsub('-', '.', as.character(eventDate)),
Type = 'Historic'
) %>%
st_transform(32613) %>%
distinct(Date, geometry, .keep_all = TRUE) %>%
select(-eventDate)
gt2024 <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = T) |>
mutate(Type = 'Current', .before = 'geometry')
all_pts <- dplyr::bind_rows(gt2024, hist_occ_data)
rt <- '../data/spatial/processed'
st_write(subset_pts(x = all_pts, res = 3, root = rt, mode = 'Presence'),
'../data/Data4modelling/3m-presence-iter1.gpkg', append = F)
st_write(subset_pts(x = all_pts, res = 10, root = rt, mode = 'Presence'),
'../data/Data4modelling/10m-presence-iter1.gpkg', append = F)
st_write(subset_pts(x = all_pts, res = 30, root = rt, mode = 'Presence'),
'../data/Data4modelling/30m-presence-iter1.gpkg', append = F)
st_write(subset_pts(x = all_pts, res = 90, root = rt, mode = 'Presence'),
'../data/Data4modelling/90m-presence-iter1.gpkg', append = F)
rm(all_pts, gt2024, rt)
library(sf)
library(tidyverse)
library(terra)
source('functions.R')
set.seed(23)
p <- '../data/Data4modelling'
f <- file.path(p, list.files(p))
f[grep('iter1',  f)]
m90 <- sf::st_read("../data/Data4modelling/90m-presence-iter1.gpkg") %>%
rename(Occurrence = Presenc) |>
sf::st_as_sf()
m90 <- filter(m90, st_is(m90, "POINT"))
modeller(m90, resolution = '3arc', iteration = 1, se_prediction = FALSE,
train_split = 0.9, p2proc = '../data/spatial/processed')
modeller(m90, resolution = '3arc', iteration = 1, se_prediction = FALSE,
train_split = 0.9, p2proc = '../data/spatial/processed')
library(sf)
library(tidyverse)
library(terra)
set.seed(23)
source('functions.R')
gt2024 <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = T)
View(gt2024)
ground_truth <- read.csv('../data/GroundTruthing/Pts.csv') |>
mutate(
across(c('Dominant_Phen'), ~ na_if(., '')),
across(Presence_M:Presence_J, ~ replace_na(., 0)))
filter(ground_truth,
str_detect(Site, '[a-z]', negate = TRUE), Location_abbrevation == 'CD')
filter(ground_truth,
str_detect(Site, '[a-z]', negate = TRUE), Location_abbrevation == 'CD')
rand_pts_iter2 <- st_read('../data/GroundTruthPts/Iteration1-Coechotopa.shp', quiet = T) |>
select(ID) %>%
inner_join(.,
filter(ground_truth,
str_detect(Site, '[a-z]', negate = TRUE), Location_abbrevation == 'CD') |>
mutate(Site = as.numeric(Site)),
by = c('ID' = 'GlobalRandomID')) |>
mutate(Site = paste0('r-', ID)) |>
select(-Latitude, -Longitude)
View(rand_pts_iter2)
rand_pts_iter2 <- st_read('../data/GroundTruthPts/Iteration1-Coechotopa.shp', quiet = T) |>
select(ID) %>%
inner_join(.,
filter(ground_truth,
str_detect(Site, '[a-z]', negate = TRUE), Location_abbrevation == 'CD') |>
mutate(Site = as.numeric(Site)),
by = c('ID' = 'GlobalRandomID')) |>
mutate(Site = paste0('r-', ID)) |>
select(-Latitude, -Longitude)
rand_pts_iter1 <- bind_rows(rand_pts_iter1, rand_pts_iter2)
ground_truth <- filter(ground_truth, is.na(GlobalRandomID)) # remove these random pts
library(sf)
library(tidyverse)
library(terra)
source('functions.R')
set.seed(23)
ground_truth <- read.csv('../data/GroundTruthing/Pts.csv') |>
mutate(
across(c('Dominant_Phen'), ~ na_if(., '')),
across(Presence_M:Presence_J, ~ replace_na(., 0)))
# this whole 'r' random points thing needs to be done separately for both the
# cochetopa and the  other set of points !!
rand_pts_iter1 <- st_read('../data/GroundTruthPts/Iteration1-cp.shp', quiet = T) |>
select(UID) %>%
inner_join(.,
filter(ground_truth,  Location_abbrevation != 'CD'),
by = c('UID' = 'GlobalRandomID')) |>
mutate(Site = paste0('r-', UID)) |>
select(-Latitude, -Longitude, -UID)
rand_pts_iter2 <- st_read('../data/GroundTruthPts/Iteration1-Coechotopa.shp', quiet = T) |>
select(ID) %>%
inner_join(.,
filter(ground_truth,
str_detect(Site, '[a-z]', negate = TRUE), Location_abbrevation == 'CD') |>
mutate(Site = as.numeric(Site)),
by = c('ID' = 'GlobalRandomID')) |>
mutate(Site = paste0('r-', ID)) |>
select(-Latitude, -Longitude)
rand_pts_iter1 <- bind_rows(rand_pts_iter1, rand_pts_iter2)
ground_truth <- filter(ground_truth, is.na(GlobalRandomID)) # remove these random pts
# THESE NEEDS REDONE - THE COCHETOPA DOME POINTS ARE INTEREFERED WITH THE RIDGE 14043 POINTS!!!!
# objects: 375, 400, 405, 412, 414, 417, 320 433, 434, 435, 451, 454
# we can't perform the same join - if we join the cochetopa data with the full data set,
# than sites from 13043 ridge will be joined instead. This is because CD points were
# written out later, and seperately, but restart their presence count at 1.
revisits <- st_read('../data/GroundTruthPts/Revisits-cp.shp', quiet = T) |>
select(UID) |>
mutate(UID = str_replace(UID, 'P', 'p')) %>%
inner_join(., filter(ground_truth,
str_detect(Site, 'p') & Location_abbrevation != 'CD'),
by = c('UID' = 'Site'))
# we can safely join the CD sites here.
revisits_cd <- st_read('../data/GroundTruthPts/Cocheotopa_revisits.shp', quiet = T) |>
select(ID) |>
mutate(UID = paste0('p-', ID)) %>%
inner_join(., filter(ground_truth,
str_detect(Site, 'p') & Location_abbrevation == 'CD'),
by = c('UID' = 'Site'))  |>
sf::st_transform(st_crs(revisits))
revisits <- bind_rows(revisits, revisits_cd)
ground_truth <- filter(ground_truth, str_detect(Site, 'p', negate= T)) |>
select(-GlobalRandomID) |>
st_as_sf(coords = c(x = 'Longitude', y = 'Latitude'), crs = 4269) |>
st_transform(st_crs(revisits))
rm(revisits_cd, rand_pts_iter2)
revisits <- filter(revisits, !is.na(Latitude)) |>
st_drop_geometry() |>
st_as_sf(coords = c(x = 'Longitude', y = 'Latitude'), crs = 4269) |>
st_transform(st_crs(revisits)) %>%
bind_rows(., filter(revisits, is.na(Latitude))) |>
mutate(Site = UID) |>
select(-Latitude, -Longitude, -UID)
ground_truth <- bind_rows(ground_truth, rand_pts_iter1, revisits) |>
select(-GlobalRandomID) %>%
mutate(Presence = ifelse(Presence_M > 0 | Presence_J > 0, 1, 0), .after = Presence_J)
st_write(ground_truth, '../data/GroundTruthing/QC.shp', append = F)
rm(rand_pts_iter1, revisits)
gt_pres <- filter(ground_truth, Presence == 1) |>
dplyr::select(NAME = OBJECT) |>
sf::st_write(dsn = '../data/GroundTruthing/Presences.kml', driver = 'kml',
quiet = T, append = F)
gt_abs <- filter(ground_truth, Presence == 0) |>
dplyr::select(NAME = OBJECT) |>
sf::st_write(dsn = '../data/GroundTruthing/Absences.kml', driver = 'kml',
quiet = T, append = F)
comp_abs <- read.csv('../data/GroundTruthing/ComputerAbs.csv') |>
mutate(
Presence_M = 0, Presence_J = 0, Presence = 0,
OBJECT = 1:n() + max(ground_truth$OBJECT)) |>
st_as_sf(coords = c(x = 'Longitude', y = 'Latitude'), crs = 4326) |>
st_transform(st_crs(ground_truth))
ab <- bind_rows(ground_truth, comp_abs) |>
arrange(OBJECT) |>
st_write('../data/GroundTruthing/Iteration1Pts.shp', append = F)
library(spdep)
nn5 = knn2nb(knearneigh(ab, 8))
w = nb2listw(nn5, style="B")
joincount.test( as.factor(ab$Presence), w)
library(sf)
library(tidyverse)
library(terra)
set.seed(23)
source('functions.R')
gt2024 <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = T)
# we'll just create the data sets at different resolutions right now...
# these are final for count data - no historic records have these attributes.
rt <- '../data/spatial/processed'
st_write(subset_pts(x = gt2024, res = 3, root = rt, mode = 'Count'),
'../data/Data4modelling/3m-count-iter1.gpkg', append = F)
st_write(subset_pts(x = gt2024, res = 10, root = rt, mode = 'Count'),
'../data/Data4modelling/10m-count-iter1.gpkg', append = F)
st_write(subset_pts(x = gt2024, res = 30, root = rt, mode = 'Count'),
'../data/Data4modelling/30m-count-iter1.gpkg', append = F)
st_write(subset_pts(x = gt2024, res = 90, root = rt, mode = 'Count'),
'../data/Data4modelling/90m-count-iter1.gpkg', append = F)
rm(gt2024, rt)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1,
Date = gsub('-', '.', as.character(eventDate)),
Type = 'Historic',
OBJECT = 1:n()
) %>%
st_transform(32613) %>%
distinct(Date, geometry, .keep_all = TRUE) %>%
select(-eventDate)
rt <- '../data/spatial/processed'
st_write(subset_pts(x = hist_occ_data, res = 3, root = rt, mode = 'Presence'),
'../data/Data4modelling/3m-presence-iter0.gpkg', append = F)
st_write(subset_pts(x = hist_occ_data, res = 10, root = rt, mode = 'Presence'),
'../data/Data4modelling/10m-presence-iter0.gpkg', append = F)
st_write(subset_pts(x = hist_occ_data, res = 30, root = rt, mode = 'Presence'),
'../data/Data4modelling/30m-presence-iter0.gpkg', append = F)
st_write(subset_pts(x = hist_occ_data, res = 90, root = rt, mode = 'Presence'),
'../data/Data4modelling/90m-presence-iter0.gpkg', append = F)
hist_occ_data <- st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Presenc = 1,
Date = gsub('-', '.', as.character(eventDate)),
Type = 'Historic'
) %>%
st_transform(32613) %>%
distinct(Date, geometry, .keep_all = TRUE) %>%
select(-eventDate)
gt2024 <- st_read('../data/GroundTruthing/Iteration1Pts.shp', quiet = T) |>
mutate(Type = 'Current', .before = 'geometry')
all_pts <- dplyr::bind_rows(gt2024, hist_occ_data)
rt <- '../data/spatial/processed'
st_write(subset_pts(x = all_pts, res = 3, root = rt, mode = 'Presence'),
'../data/Data4modelling/3m-presence-iter1.gpkg', append = F)
st_write(subset_pts(x = all_pts, res = 10, root = rt, mode = 'Presence'),
'../data/Data4modelling/10m-presence-iter1.gpkg', append = F)
st_write(subset_pts(x = all_pts, res = 30, root = rt, mode = 'Presence'),
'../data/Data4modelling/30m-presence-iter1.gpkg', append = F)
st_write(subset_pts(x = all_pts, res = 90, root = rt, mode = 'Presence'),
'../data/Data4modelling/90m-presence-iter1.gpkg', append = F)
rm(all_pts, gt2024, rt)
library(sf)
library(tidyverse)
library(terra)
library(caret)
source('functions.R')
set.seed(23)
p <- '../data/Data4modelling'
f <- file.path(p, list.files(p))
abs <- st_read('../data/Data4modelling/iter1-pa.gpkg')
m30 <- sf::st_read("../data/Data4modelling/90m-presence-iter1.gpkg") %>%
rename(Occurrence = Presenc) |>
sf::st_as_sf()
### we know that 1:1 absence to presence is far too low when including the 'local'
# absences.
m30 <- bind_rows(m30, abs)
m30 <- filter(m30, st_is(m30, "POINT")) |>
select(Occurrence)
#' Generate data sets for SD modelling at different configurations of distOrders and PAratios
#'
#' @description This function helps subset the input data (x) to combinations of distOrders- where
#' points within x distance of the raster tile resolution are removed, and PAratios the ratio
#' of presence to absence points - which is used to control the excess of absence points.
#' @param x an sf/dataframe/tibble. All potential records which could be used for modelling
#' @param distOrder Numeric. The multiple of the resolution to remove near absences by. One of: 0, 1, 2, 4, 8 etc.
#' @param PAratio Numeric. The denominator of the ratio, Presence is always 1, so 1.5 would indicate
#' 100 presence records and 150 absence records.
#' @param resolution Numeric. The approximate resolution of the input data set, one of: 3, 10, 30, 90.
distOrder_PAratio_simulator <- function(x, distOrder, PAratio, resolution, ...){
#' Generate data sets for SD modelling at different configurations of distOrders and PAratios
#'
#' @description This function helps subset the input data (x) to combinations of distOrders- where
#' points within x distance of the raster tile resolution are removed, and PAratios the ratio
#' of presence to absence points - which is used to control the excess of absence points.
#' @param x an sf/dataframe/tibble. All potential records which could be used for modelling
#' @param distOrder Numeric. The multiple of the resolution to remove near absences by. One of: 0, 1, 2, 4, 8 etc.
#' @param PAratio Numeric. The denominator of the ratio, Presence is always 1, so 1.5 would indicate
#' 100 presence records and 150 absence records.
#' @param resolution Numeric. The approximate resolution of the input data set, one of: 3, 10, 30, 90.
distOrder_PAratio_simulator <- function(x, distOrder, PAratio, resolution, ...){
res_string <- switch(
as.character(resolution),
"3" = "3m",
"10" = "1-3arc",
"30" = "1arc",
"90" = "3arc",
stop("Input to `resolution` invalid. Need be one of: 3, 10, 30, 90")
)
# subset to absence points at distance intervals from presence points.
# This accomplishes the distOrder parameter.
abs <- x[x$Occurrence==0,]
prs <- x[x$Occurrence==1,]
abs <- abs[as.numeric(sf::st_distance(
abs,
prs[sf::st_nearest_feature(abs, prs),], by_element = TRUE
)) > (distOrder*resolution),]
# now recombine the data, we will sample down to get the PA ratio we need.
x <- dplyr::bind_rows(prs, abs)
# results indicate that 3:1 is pretty good, but very conservative in terms of suitable habitat
abs <- abs[sample(1:nrow(abs), size =  nrow(prs) * PAratio, replace = F),]
x <- dplyr::bind_rows(prs, abs)
modeller(x, PAratio = paste0("1:", PAratio),
resolution = res_string, distOrder = paste0('DO:', distOrder), ...)
}
table(m30$Occurrence)
View(m30)
library(tidyverse)
library(sf)
library(terra)
source('functions.R')
set.seed(27)
occ <-  st_read('../data/collections/occurrences_coloradense/occurrences.shp', quiet = T) %>%
mutate(
Longitude = unlist(map(.$geometry,1)),
Latitude = unlist(map(.$geometry,2)),
Species = 'Eriogonum coloradense'
) %>% # do this to explicitly drop repeat observations
distinct(Longitude, Latitude, .keep_all = T)
thinned <- spThin::thin(
loc.data = occ, lat.col = 'Latitude', long.col = 'Longitude', spec.col = 'Species',
thin.par = 0.09, reps = 100, write.files = FALSE, write.log.file = FALSE,
locs.thinned.list.return = TRUE)
thinned <- thinned[[which.max(unlist(lapply(thinned, nrow)))]] %>%
st_as_sf(coords = c(x = 'Longitude', y = 'Latitude'), crs = 4326)
occ <- occ[ lengths(st_intersects(occ, thinned)) > 0, ] %>%
dplyr::select(-Longitude, -Latitude) %>%
st_transform(32613)
rm(thinned)
p2proc <- '../data/spatial/processed'
arc3 <- rastReader('dem_3arc', p2proc)
# we want to be SURE that we are finding more populations, or segments of populations
# during this iteration of field sampling. Accordingly, we will want a model which
# is more conservative in predicting suitable habitat.
PA_possible <- sdm::background(arc3,
n = nrow(occ) + (nrow(occ)*0.9),
method = 'eDist', sp = occ) %>%
select(x, y) %>%
st_as_sf(coords = c(x = 'x', y = 'y'), crs = 32613) %>%
mutate(Occurrence = 0, ID = 1:nrow(.))
p2proc <- '../data/spatial/processed'
m30 <- sf::st_read("../data/Data4modelling/30m-presence-iter1.gpkg") %>%
rename(Occurrence = Presenc) |>
filter(Occurrence == 1)
arc1 <- rastReader('dem_1arc', p2proc)
# need to apply vifcor to get results, co-linear features will wreck the computations
v1 <- usdm::vifcor(arc1)
# need to apply vifcor to get results, co-linear features will wreck the computations
v1 <- usdm::vifcor(arc1)
arc1 <- usdm::exclude(arc1, v1)
PA_possible <- sdm::background(arc1,
n = nrow(m30)*3.5,# we want some extra's just in case to push this ratio up.
method = 'gDist', sp = vect(m30)) %>%
select(x, y) %>%
st_as_sf(coords = c(x = 'x', y = 'y'), crs = 32613) %>%
mutate(Occurrence = 0, ID = 1:nrow(.))
st_write(PA_possible, '../data/Data4modelling/iter1-pa.gpkg', append = FALSE)
ggplot() +
geom_sf(data= PA_possible) +
geom_sf(data = m30, color = 'red')
library(sf)
library(tidyverse)
library(terra)
library(caret)
source('functions.R')
set.seed(23)
p <- '../data/Data4modelling'
f <- file.path(p, list.files(p))
abs <- st_read('../data/Data4modelling/iter1-pa.gpkg')
m30 <- sf::st_read("../data/Data4modelling/90m-presence-iter1.gpkg") %>%
rename(Occurrence = Presenc) |>
sf::st_as_sf()
### we know that 1:1 absence to presence is far too low when including the 'local'
# absences.
m30 <- bind_rows(m30, abs)
m30 <- filter(m30, st_is(m30, "POINT")) |>
select(Occurrence)
distOrder_PAratio_simulator(
x = m30, distOrder = 2, PAratio = 2.6,
resolution = 90, iteration = 1, se_prediction = FALSE,
train_split = 0.9, p2proc = '../data/spatial/processed'
)
source('functions.R')
distOrder_PAratio_simulator(
x = m30, distOrder = 2, PAratio = 2.6,
resolution = 90, iteration = 1, se_prediction = FALSE,
train_split = 0.9, p2proc = '../data/spatial/processed'
)
#' Generate data sets for SD modelling at different configurations of distOrders and PAratios
#'
#' @description This function helps subset the input data (x) to combinations of distOrders- where
#' points within x distance of the raster tile resolution are removed, and PAratios the ratio
#' of presence to absence points - which is used to control the excess of absence points.
#' @param x an sf/dataframe/tibble. All potential records which could be used for modelling
#' @param distOrder Numeric. The multiple of the resolution to remove near absences by. One of: 0, 1, 2, 4, 8 etc.
#' @param PAratio Numeric. The denominator of the ratio, Presence is always 1, so 1.5 would indicate
#' 100 presence records and 150 absence records.
#' @param resolution Numeric. The approximate resolution of the input data set, one of: 3, 10, 30, 90.
distOrder_PAratio_simulator <- function(x, distOrder, PAratio, resolution, ...){
res_string <- switch(
as.character(resolution),
"3" = "3m",
"10" = "1-3arc",
"30" = "1arc",
"90" = "3arc",
stop("Input to `resolution` invalid. Need be one of: 3, 10, 30, 90")
)
# subset to absence points at distance intervals from presence points.
# This accomplishes the distOrder parameter.
abs <- x[x$Occurrence==0,]
prs <- x[x$Occurrence==1,]
abs <- abs[as.numeric(sf::st_distance(
abs,
prs[sf::st_nearest_feature(abs, prs),], by_element = TRUE
)) > (distOrder*resolution),]
# now recombine the data, we will sample down to get the PA ratio we need.
x <- dplyr::bind_rows(prs, abs)
# results indicate that 3:1 is pretty good, but very conservative in terms of suitable habitat
abs <- abs[sample(1:nrow(abs), size =  nrow(prs) * PAratio, replace = F),]
x <- dplyr::bind_rows(prs, abs)
modeller(x, PAratio = paste0("1:", PAratio),
resolution = res_string, distOrder = paste0('DO:', distOrder), ...)
}
distOrder_PAratio_simulator(
x = m30, distOrder = 2, PAratio = 2.6,
resolution = 90, iteration = 1, se_prediction = FALSE,
train_split = 0.9, p2proc = '../data/spatial/processed'
)
distOrder_PAratio_simulator(
x = m30, distOrder = 2, PAratio = 3.0,
resolution = 90, iteration = 1, se_prediction = FALSE,
train_split = 0.9, p2proc = '../data/spatial/processed'
)
distOrder_PAratio_simulator(
x = m30, distOrder = 2, PAratio = 3.4,
resolution = 90, iteration = 1, se_prediction = FALSE,
train_split = 0.9, p2proc = '../data/spatial/processed'
)
abs <- st_read('../data/Data4modelling/iter1-pa.gpkg')
m30 <- sf::st_read("../data/Data4modelling/90m-presence-iter1.gpkg") %>%
rename(Occurrence = Presenc) |>
sf::st_as_sf()
### we know that 1:1 absence to presence is far too low when including the 'local'
# absences.
m30 <- bind_rows(m30, abs)
m30 <- filter(m30, st_is(m30, "POINT")) |>
select(Occurrence)
distOrder_PAratio_simulator(
x = m30, distOrder = 1, PAratio = 2.7,
resolution = 90, iteration = 1, se_prediction = FALSE,
train_split = 0.9, p2proc = '../data/spatial/processed'
)
distOrder_PAratio_simulator(
x = m30, distOrder = 1, PAratio = 3,
resolution = 90, iteration = 1, se_prediction = FALSE,
train_split = 0.9, p2proc = '../data/spatial/processed'
)
abs <- st_read('../data/Data4modelling/iter1-pa.gpkg')
m30 <- sf::st_read("../data/Data4modelling/30m-presence-iter1.gpkg") %>%
rename(Occurrence = Presenc) |>
sf::st_as_sf()
### we know that 1:1 absence to presence is far too low when including the 'local'
# absences.
m30 <- bind_rows(m30, abs)
m30 <- filter(m30, st_is(m30, "POINT")) |>
select(Occurrence)
distOrder_PAratio_simulator(
x = m30, distOrder = 0, PAratio = 2.7,
resolution = 30, iteration = 1, se_prediction = FALSE,
train_split = 0.9, p2proc = '../data/spatial/processed'
)
distOrder_PAratio_simulator(
x = m30, distOrder = 0, PAratio = 3.0,
resolution = 30, iteration = 1, se_prediction = FALSE,
train_split = 0.9, p2proc = '../data/spatial/processed'
)
distOrder_PAratio_simulator(
x = m30, distOrder = 2, PAratio = 2.7,
resolution = 30, iteration = 1, se_prediction = FALSE,
train_split = 0.9, p2proc = '../data/spatial/processed'
)
distOrder_PAratio_simulator(
x = m30, distOrder = 2, PAratio = 3.0,
resolution = 30, iteration = 1, se_prediction = FALSE,
train_split = 0.9, p2proc = '../data/spatial/processed'
)
